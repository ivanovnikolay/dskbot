import logging
from os import getenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update,Bot, ChatMember
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from .yuan import yuan_exchange_rate


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
token = getenv('TELEGRAM_TOKEN')
channel_name = '@dsk_ch'


def init():
    app = Application.builder() \
        .token(token) \
        .build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', start))
    app.add_handler(CallbackQueryHandler(button))
    return app


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ''' Send a message when the command /start is issued. '''
    user_id = update.effective_user.id
    subscribed = await is_subscribed(context.bot, user_id)
    if subscribed:
        reply_markup = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(text='üî• –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', callback_data='order'),
                InlineKeyboardButton(text='¬• –ö—É—Ä—Å –Æ–∞–Ω—è', callback_data='yuan'),
            ],
            [
                InlineKeyboardButton(text='üõç –ú–∞–≥–∞–∑–∏–Ω', callback_data='shop'),
                InlineKeyboardButton(text='üìä –û—Ç–∑—ã–≤—ã', callback_data='feedback'),
            ],
            [
                InlineKeyboardButton(text='üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data='calc'),
            ],
        ])
        await update.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—á—ë–ª–∫–∞ üêù', reply_markup=reply_markup)
    else:
        await update.message.reply_text(f'–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {channel_name} –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.')


async def is_subscribed(bot, user_id):
    try:
        member = await bot.get_chat_member(channel_name, user_id)
        return member.status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except Exception:
        return True  # ignore errors


async def button(update: Update, *_):
    ''' Parses the button. '''
    query = update.callback_query
    match query.data:
        case 'order':
            await query.message.reply_text('–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–ø–∏—à–∏—Ç–µ @dsk_support')
        case 'yuan':
            rate = yuan_exchange_rate()
            await query.message.reply_text(f'–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å —Ä—É–±–ª—è –∫ —é–∞–Ω—é: 1¬• = {rate}‚ÇΩ')
        case 'shop':
            await query.message.reply_text('–° —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ')
        case'feedback':
            await query.message.reply_text('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã –≤—ã –º–æ–∂–µ—Ç–µ –∑–¥–µ—Å—å https://t.me/dsk_reviews')
        case 'calc':
            reply_markup = InlineKeyboardMarkup([
                [
                    InlineKeyboardButton(text='–û–±—É–≤—å', callback_data='product1'),
                ],
                [
                    InlineKeyboardButton(text='–û–¥–µ–∂–¥–∞', callback_data='product3'),
                    InlineKeyboardButton(text='–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', callback_data='product4'),
                ]
            ])
            await query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup)
        case 'product1':
            await query.message.reply_text('–°–∫–æ–ª—å–∫–æ –ø–æ–∑–∏—Ü–∏–π –≤ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ?')
