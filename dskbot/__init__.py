import logging
from os import getenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
)
from .yuan import yuan_exchange_rate


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
token = getenv('TELEGRAM_TOKEN')
channel_name = '@dsk_ch'

CALCULATE_START = 1
CALCULATE_COUNT = 2
CALCULATE_TOTAL = 3


def init():
    app = Application.builder() \
        .token(token) \
        .build()

    app.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler('start', start),
            CommandHandler('help', start),
            CallbackQueryHandler(shop, pattern='shop'),
            CallbackQueryHandler(order, pattern='order'),
            CallbackQueryHandler(calculate, pattern='calculate'),
        ],
        states={
            CALCULATE_START: [CallbackQueryHandler(calculate_start)],
            CALCULATE_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate_count)],
            CALCULATE_TOTAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate_total)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    ))

    return app


async def start(update: Update, _):
    ''' Send a message when the command /start is issued. '''
    reply_markup = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text='üõç –ú–∞–≥–∞–∑–∏–Ω', callback_data='shop'),
            InlineKeyboardButton(text='üìä –û—Ç–∑—ã–≤—ã', url='https://t.me/dsk_reviews/1'),
        ],
        [
            InlineKeyboardButton(text='üî• –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', callback_data='order'),
        ],
        [
            InlineKeyboardButton(text='üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data='calculate'),
        ],
    ])
    text = f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—á—ë–ª–∫–∞ üêù\n\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å —Ä—É–±–ª—è –∫ —é–∞–Ω—é: 1¬• = {yuan_exchange_rate()}‚ÇΩ'
    await update.message.reply_text(text, reply_markup=reply_markup)


async def shop(update: Update, _):
    await update.callback_query.message.reply_text('–° —Ç–æ–≤–∞—Ä–∞–º–∏ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ')


async def order(update: Update, _):
    await update.callback_query.message.reply_text('–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–ø–∏—à–∏—Ç–µ @dsk_support')


async def calculate(update: Update, _):
    reply_markup = InlineKeyboardMarkup([
        [
            InlineKeyboardButton(text='üëü –û–±—É–≤—å', callback_data='400'),
        ],
        [
            InlineKeyboardButton(text='üëï –û–¥–µ–∂–¥–∞', callback_data='500'),
        ],
        [
            InlineKeyboardButton(text='üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', callback_data='600'),
        ],
    ])
    await update.callback_query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=reply_markup)
    return CALCULATE_START


async def calculate_start(update: Update, context):
    context.user_data['shipping'] = float(update.callback_query.data)
    await update.callback_query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:')
    return CALCULATE_COUNT


async def calculate_count(update: Update, context):
    try:
        count = int(update.message.text)
    except Exception:
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:')
        return CALCULATE_COUNT

    context.user_data['count'] = count
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:')
    return CALCULATE_TOTAL


async def calculate_total(update: Update, context):
    try:
        amount = float(update.message.text)
    except Exception:
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞:')
        return CALCULATE_TOTAL

    text = f'–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {amount}‚ÇΩ\n'
    shipping = context.user_data['shipping'] * context.user_data['count']
    text += f'–î–æ—Å—Ç–∞–≤–∫–∞: {shipping}‚ÇΩ\n'
    text += f'–ò–¢–û–ì–û: {shipping + amount}‚ÇΩ'
    await update.message.reply_text(text)
    return ConversationHandler.END


async def cancel(update: Update, _):
    return ConversationHandler.END
