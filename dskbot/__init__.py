import logging
from os import getenv
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
    error,
    ChatMember,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters,
    ContextTypes,
    ExtBot,
)
from .yuan import yuan_exchange_rate


logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

token = getenv('TELEGRAM_TOKEN')
channel_name = '@dsk_ch'
comission = 300

CALCULATE_START = 1
CALCULATE_COUNT = 2
CALCULATE_TOTAL = 3


def init():
    app = Application.builder() \
        .token(token) \
        .build()

    app.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler(('start', 'help'), start),
            CallbackQueryHandler(order, pattern='order'),
            CallbackQueryHandler(calculate, pattern='calculate'),
            CallbackQueryHandler(apps, pattern='apps'),
            CallbackQueryHandler(user_subscribed, pattern='user_subscribed'),
        ],
        states={
            CALCULATE_START: [CallbackQueryHandler(calculate_start)],
            CALCULATE_COUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate_count)],
            CALCULATE_TOTAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, calculate_total)],
        },
        fallbacks=[CommandHandler(('start', 'cancel'), start)],
    ))

    return app


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _is_user_subscribed(context.bot, update.effective_user.id):
        text = f'–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—á—ë–ª–∫–∞ üêù\n\n–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å —Ä—É–±–ª—è –∫ —é–∞–Ω—é: 1¬• = {yuan_exchange_rate()}‚ÇΩ'
        reply_markup = InlineKeyboardMarkup([
            [
                InlineKeyboardButton(text='üõç –ú–∞–≥–∞–∑–∏–Ω', url='https://docs.google.com/spreadsheets/d/11r7_7HVRW-cU_t93-BB68Qsn2GbQQEfvwkkVkZQsfuE/edit#gid=0'),
                InlineKeyboardButton(text='üìä –û—Ç–∑—ã–≤—ã', url='https://t.me/dsk_reviews/1'),
            ],
            [
                InlineKeyboardButton(text='üî• –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', callback_data='order'),
            ],
            [
                InlineKeyboardButton(text='üõí –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞', callback_data='apps'),
            ],
            [
                InlineKeyboardButton(text='üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏', callback_data='calculate'),
            ],
        ])
    else:
        text = f'–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –∫–∞–Ω–∞–ª–∞ {channel_name} –ø–æ—ç—Ç–æ–º—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª'
        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton(text='üì£ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', url=f'https://t.me/{channel_name}')],
            [InlineKeyboardButton(text='‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è', callback_data='user_subscribed')],
        ])
    await (update.message or update.callback_query.message).reply_text(text, reply_markup=reply_markup)
    return ConversationHandler.END


async def order(update: Update, _):
    await update.callback_query.message.reply_text('–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –Ω–∞–ø–∏—à–∏—Ç–µ @dsk_support')


async def apps(update: Update, _):
    await update.callback_query.message.reply_text('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞:', reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton(text='Poizon (iOS)', url='https://apps.apple.com/app/id1012871328')],
        [InlineKeyboardButton(text='Poizon (Android)', url='https://play.google.com/store/apps/details?id=com.shizhuang.poizon.hk&hl=ru&gl=US&cc_key=')],
        [InlineKeyboardButton(text='95 (iOS)', url='https://apps.apple.com/app/id1488709429')],
    ]))


async def calculate(update: Update, _):
    await update.callback_query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', reply_markup=InlineKeyboardMarkup([
        [InlineKeyboardButton(text='üëü –û–±—É–≤—å', callback_data='1400')],
        [InlineKeyboardButton(text='üëï –û–¥–µ–∂–¥–∞', callback_data='600')],
        [InlineKeyboardButton(text='üéí –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã', callback_data='700')],
    ]))
    return CALCULATE_START


async def calculate_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['shipping'] = int(update.callback_query.data)
    await update.callback_query.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:')
    return CALCULATE_COUNT


async def calculate_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        count = int(update.message.text)
    except Exception:
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:')
        return CALCULATE_COUNT

    context.user_data['count'] = count
    await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –≤ —é–∞–Ω—è—Ö:')
    return CALCULATE_TOTAL


async def calculate_total(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = round((float(update.message.text)+50) * yuan_exchange_rate(), 0)
    except Exception:
        await update.message.reply_text('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –≤ —é–∞–Ω—è—Ö:')
        return CALCULATE_TOTAL

    shipping = context.user_data['shipping']*context.user_data['count']
    comission_total = context.user_data['count'] * comission
    text = f'–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {amount}‚ÇΩ\n'
    text += f'–î–æ—Å—Ç–∞–≤–∫–∞: {shipping}‚ÇΩ\n'
    text += f'----------------------\n'
    text += f'<b>–ò–¢–û–ì–û: {amount + shipping+comission_total}‚ÇΩ</b>\n\n'
    await update.message.reply_text(text, parse_mode='html')
    return await start(update, context)


async def user_subscribed(*args, **kwargs):
    return await start(*args, **kwargs)


async def _is_user_subscribed(bot: ExtBot, user_id):
    try:
        member = await bot.get_chat_member(channel_name, user_id)
        return member.status in [ChatMember.MEMBER, ChatMember.ADMINISTRATOR, ChatMember.OWNER]
    except error.TelegramError:
        log.exception('_is_user_subscribed failed')
        return False
