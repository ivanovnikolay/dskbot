import logging
from os import getenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler
from .yuan import yuan_exchange_rate


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def init():
    token = getenv('TELEGRAM_TOKEN')
    app = Application.builder() \
        .token(token) \
        .build()
    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', start))
    app.add_handler(CallbackQueryHandler(button))
    return app


async def start(update: Update, *_):
    ''' Send a message when the command /start is issued. '''
    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton(text='¬• –ö—É—Ä—Å –Æ–∞–Ω—è', callback_data='yuan')],
        [InlineKeyboardButton(text='üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')],
        [InlineKeyboardButton(text='üõç –ú–∞–≥–∞–∑–∏–Ω', url='https://www.google.com')],
        [InlineKeyboardButton(text='üìä –û—Ç–∑—ã–≤—ã', url='https://www.google.com')],
    ])
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø—á—ë–ª–∫–∞üêù", reply_markup=reply_markup)


async def button(update: Update, *_):
    ''' Parses the button. '''
    query = update.callback_query
    match query.data:
        case 'yuan':
            rate = yuan_exchange_rate()
            await query.message.reply_text(f'–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å —Ä—É–±–ª—è –∫ —é–∞–Ω—é: 1¬• = {rate}‚ÇΩ')
        case 'support':
            await query.message.reply_text('–£ –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞? –ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ –Ω–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É @dsk_support')
